!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var o=t();for(var s in o)("object"==typeof exports?exports:e)[s]=o[s]}}(this,(function(){return function(e){var t={};function o(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,s){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(o.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(s,n,function(t){return e[t]}.bind(null,n));return s},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t){e.exports=class{constructor(e){this.socketDomain=e,this.messageArr=[],this.messageALl={},this.sessid="",this.SocketTask=null,this.isConnectedSocket=!1,this.reConnectTimer=null,this.loopConnectTimer=null,this.loopConnectBackTimer=null}initSocket(){this.SocketTask=this.connectSocket(),this.listenConnectError(),this.listenConnectSuccess(),this.listenMessageBack(),this.listenSocketClose()}connectSocket(){return new WebSocket(this.socketDomain)}listenConnectSuccess(){this.SocketTask.onopen=e=>{console.log("连接成功--"),this.isConnectedSocket=!0,this.clearAllTimer()}}listenSocketClose(){this.SocketTask.onclose=e=>{console.log("监听到断开"),this.clearAllTimer(),this.isConnectedSocket&&(console.log("socket断开了"),this.SocketTask.close(),this.sessid="",this.reConnectTimer=setInterval(()=>{console.log("重连"),this.initSocket()},5e3))}}listenConnectError(){this.SocketTask.onerror=e=>{console.log("socket连接异常")}}sendSocketMessage(e){try{console.log("send",e),this.SocketTask.send(JSON.stringify(e))}catch(e){console.log("发送消息socket失败")}}listenMessageBack(){this.SocketTask.onmessage=({data:e})=>{let t=(e=JSON.parse(e)).cmd;this.messageALl.cb&&this.messageALl.cb(e);for(const o of this.messageArr)if(o.cmd===t)return o.cb(e.msg)}}addListener(e,t){this.messageArr.push({cmd:e,cb:t})}listenAll(e){this.messageALl={cb:e}}removeListener(e){this.messageArr=this.messageArr.filter(t=>t.cmd!==e),console.log(this.messageArr,"移除messageArr")}removeAllListener(){this.messageArr=[],console.log(this.messageArr,"清空messageArr")}closeSocket(){this.isConnectedSocket&&(this.SocketTask.close(),console.log("手动关闭成功"),this.isConnectedSocket=!1)}clearAllTimer(){this.reConnectTimer&&(clearInterval(this.reConnectTimer),this.reConnectTimer=null),this.loopConnectTimer&&(clearInterval(this.loopConnectTimer),this.loopConnectTimer=null),this.loopConnectBackTimer&&(clearInterval(this.loopConnectBackTimer),this.loopConnectBackTimer=null)}}}])}));